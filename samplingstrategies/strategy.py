from abc import ABC, abstractmethod

class SamplingStrategy(ABC):
    NAME = 'UNDEFINED'
    # Define with JSON/dict fieldname:list(type, description)
    # User experience of autogenerated fields based on JSON keys
    CONFIG = {'name':[str, NAME]}

    def __str__(self):
        return self.NAME

    @abstractmethod
    def sample(self, request): # request is JSON with same keys as config, with values being actual value instances
        """
        Sample from a neighborhood using a chosen SamplingStrategy.

        Parameters
        ----------
        request : dict
            all the data needed to fulfill the request

        Returns
        -------
        list(tuple(list, list))
            a list (representing each point) of tuples containing a list of dates and
            the corresponding image url for each date
        """
        raise NotImplementedError('Cannot call sample() on abstract SamplingStrategy class.')
