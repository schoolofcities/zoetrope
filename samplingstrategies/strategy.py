from abc import ABC, abstractmethod

class SamplingStrategy(ABC):
    NAME = 'UNDEFINED'
    # Define with JSON/dict fieldname:list(type, description)
    # User experience of autogenerated fields based on JSON keys
    CONFIG = {'name':[str, NAME]}

    def __str__(self):
        return self.NAME

    @abstractmethod
    def sample(self, request): # request is JSON with same keys as config, with values being actual value instances
        raise NotImplementedError('Cannot call sample() on abstract SamplingStrategy class.')
